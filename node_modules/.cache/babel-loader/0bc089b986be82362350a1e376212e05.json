{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\92475\\\\OneDrive\\\\\\u684C\\u9762\\\\react\\\\src\\\\contexts\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* access user anywhere in application*/\n\n/* https://firebase.google.com/docs/auth/web/manage-users */\nimport React, { useContext, useState, useEffect } from 'react';\nimport { auth } from '../firebase';\n/* create a context*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\n/* easy access*/\n\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n  /* this function return us the value of the current context*/\n}\n/* this Authprovider function is in charge of all function needed to update user status*/\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function AuthProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n\n  /* pass in children to render in \"return\"*/\n  const [currentUser, setCurrentUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n    });\n    /* when auth state changed(eg sign in), set current user variable to the user value detected*/\n\n    unsubscribe();\n  }, []);\n  /* What is Unsubscribe:\r\n  at some later time, we want to stop a function from\r\n   executing anymore, because we've already done whatever\r\n  we need to. In firebase, the onAuthStateChanged function returns a\r\n   function to you that unsubscribes the function you originally gave it*/\n\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n  /* these are the values needed to be pass in for context*/\n\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout\n  };\n  return (\n    /*#__PURE__*/\n\n    /* use context in provider, \r\n    wrap all code need information about the 'value' prop context in provider\r\n    */\n\n    /* passing in the current value of users and functions needed,\r\n    and then render the children - which is the app page*/\n    _jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s2(AuthProvider, \"weNTBXcC62DPmZO+PUtwIm8P/FM=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useContext","useState","useEffect","auth","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","unsubscribe","onAuthStateChanged","user","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","value"],"sources":["C:/Users/92475/OneDrive/桌面/react/src/contexts/AuthContext.js"],"sourcesContent":["/* access user anywhere in application*/\r\n/* https://firebase.google.com/docs/auth/web/manage-users */\r\n\r\nimport React, { useContext, useState, useEffect } from 'react'\r\nimport {auth} from '../firebase'\r\n\r\n/* create a context*/\r\nconst AuthContext = React.createContext()\r\n\r\n/* easy access*/\r\nexport function useAuth(){\r\n    return useContext(AuthContext) /* this function return us the value of the current context*/\r\n}\r\n\r\n/* this Authprovider function is in charge of all function needed to update user status*/\r\nexport default function AuthProvider({children}) {\r\n    /* pass in children to render in \"return\"*/\r\n    const [currentUser, setCurrentUser] = useState()\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n            setCurrentUser(user)\r\n        })/* when auth state changed(eg sign in), set current user variable to the user value detected*/\r\n\r\n        unsubscribe()\r\n    }, [])\r\n\r\n    /* What is Unsubscribe:\r\n    at some later time, we want to stop a function from\r\n     executing anymore, because we've already done whatever\r\n    we need to. In firebase, the onAuthStateChanged function returns a\r\n     function to you that unsubscribes the function you originally gave it*/\r\n\r\n    function signup(email, password){\r\n        return auth.createUserWithEmailAndPassword(email,password)\r\n    }\r\n\r\n    function login(email, password){\r\n        return auth.signInWithEmailAndPassword(email,password)\r\n    }\r\n\r\n    function logout(){\r\n        return auth.signOut()\r\n    }\r\n\r\n    /* these are the values needed to be pass in for context*/\r\n    const value = {\r\n        currentUser,\r\n        signup,\r\n        login,\r\n        logout\r\n    }\r\n\r\n\r\n  return (\r\n      /* use context in provider, \r\n      wrap all code need information about the 'value' prop context in provider\r\n      */\r\n      /* passing in the current value of users and functions needed,\r\n      and then render the children - which is the app page*/\r\n    <AuthContext.Provider value={value}>\r\n        \r\n        {children} \r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n"],"mappings":";;;;AAAA;;AACA;AAEA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAAQC,IAAR,QAAmB,aAAnB;AAEA;;;AACA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;AAEA;;AACA,OAAO,SAASC,OAAT,GAAkB;EAAA;;EACrB,OAAON,UAAU,CAACI,WAAD,CAAjB;EAA+B;AAClC;AAED;;GAJgBE,O;;AAKhB,eAAe,SAASC,YAAT,OAAkC;EAAA;;EAAA,IAAZ;IAACC;EAAD,CAAY;;EAC7C;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;EAEAC,SAAS,CAAC,MAAM;IACZ,MAAMS,WAAW,GAAGR,IAAI,CAACS,kBAAL,CAAwBC,IAAI,IAAI;MAChDH,cAAc,CAACG,IAAD,CAAd;IACH,CAFmB,CAApB;IAEE;;IAEFF,WAAW;EACd,CANQ,EAMN,EANM,CAAT;EAQA;AACJ;AACA;AACA;AACA;;EAEI,SAASG,MAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAgC;IAC5B,OAAOb,IAAI,CAACc,8BAAL,CAAoCF,KAApC,EAA0CC,QAA1C,CAAP;EACH;;EAED,SAASE,KAAT,CAAeH,KAAf,EAAsBC,QAAtB,EAA+B;IAC3B,OAAOb,IAAI,CAACgB,0BAAL,CAAgCJ,KAAhC,EAAsCC,QAAtC,CAAP;EACH;;EAED,SAASI,MAAT,GAAiB;IACb,OAAOjB,IAAI,CAACkB,OAAL,EAAP;EACH;EAED;;;EACA,MAAMC,KAAK,GAAG;IACVb,WADU;IAEVK,MAFU;IAGVI,KAHU;IAIVE;EAJU,CAAd;EAQF;IAAA;;IACI;AACN;AACA;;IACM;AACN;IACI,QAAC,WAAD,CAAa,QAAb;MAAsB,KAAK,EAAEE,KAA7B;MAAA,UAEKd;IAFL;MAAA;MAAA;MAAA;IAAA;EANF;AAWD;;IAlDuBD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}